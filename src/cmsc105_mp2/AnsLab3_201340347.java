/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cmsc105_mp2;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;



/**
 *
 * @author czarinarae
 */
public class AnsLab3_201340347 extends javax.swing.JFrame {

    HashMap<Integer, Double> thres = new HashMap();
    Hydrophobicity lookup = new Hydrophobicity();
    Plotting p;
    
    private void initMap(){
        thres.put(0, 0.5);
        thres.put(5, 0.6);
        thres.put(10, 0.7);
        thres.put(15, 0.8);
        thres.put(20, 0.9);
        thres.put(25, 1.0);
        thres.put(30, 1.1);
        thres.put(35, 1.2);
        thres.put(40, 1.3);
        thres.put(45, 1.4);
        thres.put(50, 1.5);
        thres.put(55, 1.6);
        thres.put(60, 1.7);
        thres.put(65, 1.8);
        thres.put(70, 1.9);
        thres.put(75, 2.0);
        thres.put(80, 2.1);
        thres.put(85, 2.2);
        thres.put(90, 2.3);
        thres.put(95, 2.4);
        thres.put(100, 2.5);
    }
    
    /**
     * Creates new form MainFrame
     */
    public AnsLab3_201340347() {
        initMap();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sequence = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        Analyze = new javax.swing.JButton();
        Threshold = new javax.swing.JSlider();
        WindowLen = new javax.swing.JComboBox();
        HydroScale = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sequence.setColumns(20);
        sequence.setRows(5);
        jScrollPane1.setViewportView(sequence);

        jButton1.setBackground(new java.awt.Color(51, 153, 255));
        jButton1.setText("Upload a File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Analyze.setBackground(new java.awt.Color(102, 153, 255));
        Analyze.setText("Analyze");
        Analyze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnalyzeActionPerformed(evt);
            }
        });

        Threshold.setSnapToTicks(true);
        Threshold.setPaintLabels(true);
        Threshold.setPaintTicks(true);
        Threshold.setMajorTickSpacing(25);
        Threshold.setMinorTickSpacing(5);

        Hashtable<Integer, JLabel> table = new Hashtable <Integer, JLabel>();
        table.put(0, new JLabel("0.5"));
        table.put(25, new JLabel("1.0"));
        table.put(50, new JLabel("1.5"));
        table.put(75, new JLabel("2.0"));
        table.put(100, new JLabel("2.5"));
        Threshold.setLabelTable(table);
        Threshold.setPaintLabels(true);
        Threshold.setPaintTicks(true);
        Threshold.setToolTipText("");
        Threshold.setValue(25);

        WindowLen.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "3", "5", "7", "9", "11", "13", "15", "17", "19", "21", "23", "25", "27", "29", "31", "33", "35", "37", "39", "41", "43", "45", "47", "49", "51" }));
        WindowLen.setSelectedIndex(8);

        HydroScale.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Kyte-Doolitle", "Hopp-Woods", "Cornette", "Eisenberg", "Rose", "Janin", "Engelman GES" }));

        jLabel1.setText("Sliding Window Length:");

        jLabel2.setText("Hydrophobicity Scale:");

        jLabel3.setText("Average Hydrophobicity Thresold:");

        jLabel4.setText("Enter Protein Sequence:");

        jButton3.setBackground(new java.awt.Color(204, 0, 0));
        jButton3.setText("QUIT");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setText("Reset Defaults");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Clear");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(WindowLen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HydroScale, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(Threshold, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Analyze, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jButton3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(jButton1)
                        .addGap(5, 5, 5)
                        .addComponent(jButton4)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(HydroScale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(WindowLen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Threshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Analyze)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void Analyze(){
        String seq = sequence.getText();
        String[] seq_arr = seq.split("\n");
        String stranslate = "";
        ArrayList<Data> arr_d = new ArrayList();
        Data data = new Data();
        String data_double = "";
        
        for (String s: seq_arr){
            //System.out.println(s);
            if (s.contains(">")){
                if (!data_double.isEmpty()){
                    data.sequence = data_double;
                    arr_d.add(data);
                    data_double = "";
                    data = new Data();
                }
                data.name = s.substring(1);
            }
            else{
                data_double = data_double + s;
            }
        }
        if (!data_double.equals("")){
            data.sequence = data_double;
            arr_d.add(data);
        }
        
        //System.out.println("THE ADDED THINGS:");
        for (Data d: arr_d){
            //System.out.println(d.name);
        }
        
        int threshold = Threshold.getValue();
        int window = Integer.valueOf(WindowLen.getSelectedItem().toString());
        int scale = HydroScale.getSelectedIndex();
        for (int i = 0; i < arr_d.size(); i++){
            //System.out.println(arr_d.get(i).name);
            double[] avgs = new double[arr_d.get(i).sequence.length()];
            //System.out.println("AVERAGE" + avgs.length);
            for (int j = 0; j <= arr_d.get(i).sequence.length()-window; j++){
                //System.out.println("j = " + j + " < " +  arr_d.get(i).sequence.length());
                double avg = 0;
                for (int k = j; k < j+window; k++){
                //    System.out.println("k = " + k + " < " +  j+window);
                    avg += lookup.Scales.get(scale).get(arr_d.get(i).sequence.charAt(k) + "");
                }
                avg /= window;
                avgs[j+window/2] = avg;
                //System.out.println(avg);
            }
            arr_d.get(i).plots = avgs;
        }
        
        Plotting plott = new Plotting(thres.get(threshold), arr_d, window);
    }
    
    private void AnalyzeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnalyzeActionPerformed
        
        String seq = sequence.getText();
        String[] seq_arr = seq.split("\n");
        String stranslate = "";
        ArrayList<Data> arr_d = new ArrayList();
        Data data = new Data();
        String data_double = "";
        
        for (String s: seq_arr){
            //System.out.println(s);
            if (s.contains(">")){
                if (!data_double.isEmpty()){
                    data.sequence = data_double;
                    arr_d.add(data);
                    data_double = "";
                    data = new Data();
                }
                data.name = s.substring(1);
            }
            else{
                data_double = data_double + s;
            }
        }
        if (!data_double.equals("")){
            data.sequence = data_double;
            arr_d.add(data);
        }
        
        boolean flag = false;
        if (arr_d.size() < 1){
            JOptionPane.showMessageDialog(this, "ERROR: Please enter a sequence!");
        }
        for (Data d: arr_d){
            if (d.sequence.charAt(0)!='M'){
                JOptionPane.showMessageDialog(this, "ERROR: Sequence " + d.name + "does not start with Methionine!");
                flag = true;
                break;
            }
            if (d.sequence.length() < Integer.valueOf(WindowLen.getSelectedItem().toString())){
                JOptionPane.showMessageDialog(this, "ERROR: Window Length is more than sequence length in " + d.name);
                flag = true;
                break;
            }
        }
        
        if (!flag){
            Analyze();
        }
    }//GEN-LAST:event_AnalyzeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        JFileChooser chooser = new JFileChooser();
        File f = new File("");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("FASTA file", "fasta");
        chooser.setFileFilter(filter);
        chooser.setCurrentDirectory(new File("Documents"));
        int returnVal = chooser.showOpenDialog(this.getParent());
        if(returnVal == JFileChooser.APPROVE_OPTION) {
           System.out.println("You chose to open this file: " +
                chooser.getSelectedFile().getName());
           f = chooser.getSelectedFile();
       }
        try {
            Scanner scan = new Scanner(f);
            String s = "";
            while (scan.hasNext()){
                s += scan.nextLine() + "\n";
            }
            this.sequence.setText(s);
        } catch (FileNotFoundException ex) {
            System.out.println("Something is wrong");
            //Logger.getLogger(this.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        WindowLen.setSelectedIndex(8);
        HydroScale.setSelectedIndex(0);
        Threshold.setValue(25);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        sequence.setText("");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton3ActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnsLab3_201340347.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnsLab3_201340347.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnsLab3_201340347.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnsLab3_201340347.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AnsLab3_201340347().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Analyze;
    private javax.swing.JComboBox HydroScale;
    private javax.swing.JSlider Threshold;
    private javax.swing.JComboBox WindowLen;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea sequence;
    // End of variables declaration//GEN-END:variables
}

class Hydrophobicity{
    ArrayList<HashMap<String, Double>> Scales;
    
    Hydrophobicity(){
        Scales = new ArrayList();
        initScales();
    }
    
    public void initScales(){
        HashMap<String, Double> Kyte_Doolittle = new HashMap();
        Kyte_Doolittle.put("A", 1.80);
        Kyte_Doolittle.put("C", 2.50);
        Kyte_Doolittle.put("D", -3.50);
        Kyte_Doolittle.put("E", -3.50);
        Kyte_Doolittle.put("F", 2.80);
        Kyte_Doolittle.put("G", -0.40);
        Kyte_Doolittle.put("H", -3.20);
        Kyte_Doolittle.put("I", 4.50);
        Kyte_Doolittle.put("K", -3.90);
        Kyte_Doolittle.put("L", 3.80);
        Kyte_Doolittle.put("M", 1.90);
        Kyte_Doolittle.put("N", -3.50);
        Kyte_Doolittle.put("P", -1.60);
        Kyte_Doolittle.put("Q", -3.50);
        Kyte_Doolittle.put("R", -4.50);
        Kyte_Doolittle.put("S", -0.80);
        Kyte_Doolittle.put("T", -0.70);
        Kyte_Doolittle.put("V", 4.20);
        Kyte_Doolittle.put("W", -0.90);
        Kyte_Doolittle.put("Y", -1.30);
        HashMap<String, Double> Hopp_Woods = new HashMap();
        Hopp_Woods.put("A", -0.50);
        Hopp_Woods.put("C", -1.00);
        Hopp_Woods.put("D", 3.00);
        Hopp_Woods.put("E", 3.00);
        Hopp_Woods.put("F", -2.50);
        Hopp_Woods.put("G", 0.00);
        Hopp_Woods.put("H", -0.50);
        Hopp_Woods.put("I", -1.80);
        Hopp_Woods.put("K", 3.00);
        Hopp_Woods.put("L", -1.80);
        Hopp_Woods.put("M", -1.30);
        Hopp_Woods.put("N", 0.20);
        Hopp_Woods.put("P", 0.00);
        Hopp_Woods.put("Q", 0.20);
        Hopp_Woods.put("R", 3.00);
        Hopp_Woods.put("S", 0.30);
        Hopp_Woods.put("T", -0.40);
        Hopp_Woods.put("V", -1.50);
        Hopp_Woods.put("W", -3.40);
        Hopp_Woods.put("Y", -2.30);
        HashMap<String, Double> Cornette = new HashMap();
        Cornette.put("A", 0.20);
        Cornette.put("C", 4.10);
        Cornette.put("D", -3.10);
        Cornette.put("E", -1.80);
        Cornette.put("F", 4.40);
        Cornette.put("G", 0.00);
        Cornette.put("H", 0.50);
        Cornette.put("I", 4.80);
        Cornette.put("K", -3.10);
        Cornette.put("L", 5.70);
        Cornette.put("M", 4.20);
        Cornette.put("N", -0.50);
        Cornette.put("P", -2.20);
        Cornette.put("Q", -2.80);
        Cornette.put("R", 1.40);
        Cornette.put("S", -0.50);
        Cornette.put("T", -1.90);
        Cornette.put("V", 4.70);
        Cornette.put("W", 1.00);
        Cornette.put("Y", 3.20);
        HashMap<String, Double> Eisenberg = new HashMap();
        Eisenberg.put("A", 0.62);
        Eisenberg.put("C", 0.29);
        Eisenberg.put("D", -0.90);
        Eisenberg.put("E", -0.74);
        Eisenberg.put("F", 1.19);
        Eisenberg.put("G", 0.48);
        Eisenberg.put("H", -0.40);
        Eisenberg.put("I", 1.38);
        Eisenberg.put("K", -1.50);
        Eisenberg.put("L", 1.06);
        Eisenberg.put("M", 0.64);
        Eisenberg.put("N", -0.78);
        Eisenberg.put("P", 0.12);
        Eisenberg.put("Q", -0.85);
        Eisenberg.put("R", -2.53);
        Eisenberg.put("S", -0.18);
        Eisenberg.put("T", -0.05);
        Eisenberg.put("V", 1.08);
        Eisenberg.put("W", 0.81);
        Eisenberg.put("Y", 0.26);
        HashMap<String, Double> Rose = new HashMap();
        Rose.put("A", 0.74);
        Rose.put("C", 0.91);
        Rose.put("D", 0.62);
        Rose.put("E", 0.62);
        Rose.put("F", 0.88);
        Rose.put("G", 0.72);
        Rose.put("H", 0.78);
        Rose.put("I", 0.88);
        Rose.put("K", 0.52);
        Rose.put("L", 0.85);
        Rose.put("M", 0.85);
        Rose.put("N", 0.63);
        Rose.put("P", 0.64);
        Rose.put("Q", 0.62);
        Rose.put("R", 0.64);
        Rose.put("S", 0.66);
        Rose.put("T", 0.70);
        Rose.put("V", 0.86);
        Rose.put("W", 0.85);
        Rose.put("Y", 0.74);
        HashMap<String, Double> Janin = new HashMap();
        Janin.put("A", 0.30);
        Janin.put("C", 0.90);
        Janin.put("D", -0.60);
        Janin.put("E", -0.70);
        Janin.put("F", 0.50);
        Janin.put("G", 0.30);
        Janin.put("H", -0.10);
        Janin.put("I", 0.70);
        Janin.put("K", -1.80);
        Janin.put("L", 0.50);
        Janin.put("M", 0.40);
        Janin.put("N", -0.50);
        Janin.put("P", -0.30);
        Janin.put("Q", -0.70);
        Janin.put("R", -1.40);
        Janin.put("S", -0.10);
        Janin.put("T", -0.20);
        Janin.put("V", 0.60);
        Janin.put("W", 0.30);
        Janin.put("Y", -0.40);
        HashMap<String, Double> GES = new HashMap();
        GES.put("A", 1.60);
        GES.put("C", 2.00);
        GES.put("D", -9.20);
        GES.put("E", -8.20);
        GES.put("F", 3.70);
        GES.put("G", 1.00);
        GES.put("H", -3.00);
        GES.put("I", 3.10);
        GES.put("K", -8.80);
        GES.put("L", 2.80);
        GES.put("M", 3.40);
        GES.put("N", -4.80);
        GES.put("P", -0.20);
        GES.put("Q", -4.10);
        GES.put("R", -12.30);
        GES.put("S", 0.60);
        GES.put("T", 1.20);
        GES.put("V", 2.60);
        GES.put("W", 1.90);
        GES.put("Y", -0.70);
        
        Scales.add(Kyte_Doolittle);
        Scales.add(Hopp_Woods);
        Scales.add(Cornette);
        Scales.add(Eisenberg);
        Scales.add(Rose);
        Scales.add(Janin);
        Scales.add(GES);
    }
}

class Data{
    double[] plots;
    String sequence = "";
    String name;
}